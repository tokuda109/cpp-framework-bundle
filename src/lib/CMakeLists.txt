cmake_minimum_required(VERSION 3.8.2 FATAL_ERROR)

set(CMAKE_CXX_STANDARD 14)

execute_process(
    COMMAND /usr/bin/xcrun -sdk iphonesimulator -find gcc
    OUTPUT_VARIABLE CMAKE_C_COMPILER
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND /usr/bin/xcrun -sdk iphonesimulator -find g++
    OUTPUT_VARIABLE CMAKE_CXX_COMPILER
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND /usr/bin/xcrun -sdk iphonesimulator --show-sdk-path
    OUTPUT_VARIABLE CMAKE_OSX_SYSROOT
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT}")

set(CMAKE_SHARED_LINKER_FLAGS "-Wall")

set(CMAKE_SYSTEM_NAME Darwin)
set(CMAKE_SYSTEM_VERSION 1)
set(UNIX True)
set(APPLE True)
set(IOS True)

set(CMAKE_OSX_DEPLOYMENT_TARGET "" CACHE STRING "Force unset of the deployment target for iOS" FORCE)

set(CMAKE_SHARED_LIBRARY_PREFIX "lib")
set(CMAKE_SHARED_LIBRARY_SUFFIX ".dylib")
set(CMAKE_SHARED_MODULE_PREFIX "lib")
set(CMAKE_SHARED_MODULE_SUFFIX ".so")
set(CMAKE_DL_LIBS "")

set(CMAKE_MACOSX_BUNDLE True)
set(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib" ".so" ".a")

set(CMAKE_FIND_ROOT_PATH ${CMAKE_OSX_SYSROOT})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

if (${IOS_PLATFORM} STREQUAL "OS")
    set(IOS_ARCH armv7 armv7s arm64)
elseif (${IOS_PLATFORM} STREQUAL "SIMULATOR")
    set(IOS_ARCH i386)
elseif (${IOS_PLATFORM} STREQUAL "SIMULATOR64")
    set(IOS_ARCH x86_64)
endif (${IOS_PLATFORM} STREQUAL "OS")

message(STATUS "IOS_ARCH: ${IOS_ARCH}")

set(CMAKE_OSX_ARCHITECTURES ${IOS_ARCH} CACHE string  "Build architecture for iOS")

set(CMAKE_FIND_ROOT_PATH ${CMAKE_IOS_DEVELOPER_ROOT} ${CMAKE_IOS_SDK_ROOT} ${CMAKE_PREFIX_PATH} CACHE string  "iOS find search path root")

set(CMAKE_FIND_FRAMEWORK FIRST)

include(OpenCV)

prepare_opencv()

add_library(
    ${FRAMEWORK_NAME} STATIC
    SampleLib.h
    SampleLib.mm
    sample.h
    sample.cpp
)

if (OpenCV_FOUND)
    target_link_libraries(
        ${FRAMEWORK_NAME}
        ${OpenCV_LIBRARIES}
    )
endif()

set_target_properties(
    ${FRAMEWORK_NAME} PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/SampleApp/Frameworks/
    ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/SampleApp/Frameworks/
    FRAMEWORK ON
    VERSION ${PACKAGE_VERSION}
    FRAMEWORK_VERSION A
    MACOSX_FRAMEWORK_IDENTIFIER ${FRAMEWORK_BUNDLE_IDENTIFIER}
    PUBLIC_HEADER SampleLib.h
)
